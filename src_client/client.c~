/*
** client.c for  in /home/benoit_l/rendu/PSU_2014_myftp
** 
** Made by Leo BENOIT
** Login   <benoit_l@epitech.net>
** 
** Started on  Tue Mar 10 16:11:41 2015 Leo BENOIT
** Last update Wed Mar 11 13:54:18 2015 Leo BENOIT
*/

#include <sys/types.h>
#include <sys/socket.h>
#include <unistd.h>
#include <netdb.h>
#include <string.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdlib.h>
#include <stdio.h>

void	do_client(int cs, char *str)
{
  write(cs, str, strlen(str));
  //  close(cs);
}

void	my_putchar(char x)
{
  write(1, &x, 1);
}

void    my_put_nbr(int nb)
{
  if (nb < 0)
    {
      my_putchar('-');
      nb = -nb;
    }
  if (nb >= 10)
    {
      my_put_nbr(nb / 10);
      my_put_nbr(nb % 10);
    }
  else
    my_putchar(nb + '0');
}

int main(int ac, char **av)
{
  struct protoent *pe;
  struct sockaddr_in	sin;
  int			s;
  int			port;
  int			error;

  if (ac != 3)
    {
      write(1, "Enter the number of the port\n",
	    strlen("Enter the number of the port\n"));
      return (-1);
    }
  port = atoi(av[2]);
  pe = getprotobyname("TCP");
  s = socket(AF_INET, SOCK_STREAM, pe->p_proto);
  if (s == -1)
    {
      write(2, "socket", strlen("socket"));
      close(s);
      return (-1);
    }
  sin.sin_family = AF_INET;
  sin.sin_port = htons(port);
  sin.sin_addr.s_addr = inet_addr(av[1]);

  error = connect(s, (const struct sockaddr*)&sin, sizeof(sin));
  if (error == -1)
    {
      write(2, "connect", strlen("connect"));
      close(s);
      return (-1);
    }
  char *buff;
  int	ligne = 0;

  while (42)
    {
      write(1, "connect: benoit_l@pc", strlen("connect: benoit_l@pc"));
      my_put_nbr(ligne);
      write(1, " > ", 3);
      buff = malloc(sizeof(char) * 500);
      if (read(0, buff, 500) == -1)
	{
	  close(s);
	  return (0);
	}
      if (strcmp(buff, "exit\n") == 0)
        {
	  do_client(s, buff);
          close(s);
          return (0);
        }
      do_client(s, buff);
      int	i = 0;
      while (i < 500)
	{
	  buff[i] = '\0';
	  ++i;
	}
      i = 0;
      if (read(s, buff, 500) == -1)
	{
	  close(s);
	  return (0);
	}
      write(1, buff, strlen(buff));
      while (i < 500)
	{
	  buff[i] = '\0';
	  ++i;
	}
      i = 0;
      free(buff);
      ++ligne;
    }
  return (0);
}
